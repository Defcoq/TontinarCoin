{"ast":null,"code":"import _defineProperty from \"C:\\\\Workspace\\\\Repo\\\\Smart Contract Solidity\\\\TontinarCoin\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Workspace\\\\Repo\\\\Smart Contract Solidity\\\\TontinarCoin\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { getWeb3, getContractInstance } from \"../Web3Util\";\n\nconst useWeb3 = () => {\n  const _useState = useState({\n    user: \"\",\n    balance: 0,\n    contracts: null,\n    networkId: \"\",\n    networkType: \"\",\n    web3: undefined\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  useEffect(() => {\n    async function loadWeb3() {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const user = accounts[0];\n      const balanceInWei = await web3.eth.getBalance(user);\n      var balance = web3.utils.fromWei(balanceInWei, \"ether\");\n      const networkId = await web3.eth.net.getId();\n      const networkType = await web3.eth.net.getNetworkType();\n      const myToken = await getContractInstance(web3, 'TontinarToken');\n      const myTokenSale = await getContractInstance(web3, 'TontinarTokenSale');\n      const kycContract = await getContractInstance(web3, 'KycContract');\n      let totalSupply = 0;\n      let balanceOf = 0;\n\n      if (kycContract._address) {\n        totalSupply = await myToken.methods.totalSupply().call();\n        balanceOf = await myToken.methods.balanceOf(myTokenSale._address).call();\n      }\n\n      window.web3 = web3;\n      window.user = user;\n      setState({\n        accounts,\n        user: user,\n        balance: balance,\n        contracts: {\n          myToken,\n          myTokenSale,\n          kycContract\n        },\n        networkId: networkId,\n        networkType: networkType,\n        web3: web3,\n        totalSupply,\n        balanceOf\n      });\n    }\n\n    loadWeb3();\n  }, []);\n  return _objectSpread({}, state);\n};\n\nexport default useWeb3;","map":{"version":3,"sources":["C:/Workspace/Repo/Smart Contract Solidity/TontinarCoin/client/src/hooks/useWeb3.js"],"names":["useState","useEffect","getWeb3","getContractInstance","useWeb3","user","balance","contracts","networkId","networkType","web3","undefined","state","setState","loadWeb3","accounts","eth","getAccounts","balanceInWei","getBalance","utils","fromWei","net","getId","getNetworkType","myToken","myTokenSale","kycContract","totalSupply","balanceOf","_address","methods","call","window"],"mappings":";;;;;;;AAAA,SAAUA,QAAV,EAAoBC,SAApB,QAAqC,OAArC;AACA,SAASC,OAAT,EAAkBC,mBAAlB,QAA6C,aAA7C;;AAEA,MAAMC,OAAO,GAAG,MAAK;AAAA,oBACUJ,QAAQ,CAAC;AAChCK,IAAAA,IAAI,EAAE,EAD0B;AAEhCC,IAAAA,OAAO,EAAE,CAFuB;AAGhCC,IAAAA,SAAS,EAAE,IAHqB;AAIhCC,IAAAA,SAAS,EAAE,EAJqB;AAKhCC,IAAAA,WAAW,EAAE,EALmB;AAMhCC,IAAAA,IAAI,EAAEC;AAN0B,GAAD,CADlB;AAAA;AAAA,QACVC,KADU;AAAA,QACHC,QADG;;AAUjBZ,EAAAA,SAAS,CAAC,MAAI;AACV,mBAAea,QAAf,GAA2B;AACzB,YAAMJ,IAAI,GAAG,MAAMR,OAAO,EAA1B;AACA,YAAMa,QAAQ,GAAG,MAAML,IAAI,CAACM,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMZ,IAAI,GAAGU,QAAQ,CAAC,CAAD,CAArB;AACA,YAAMG,YAAY,GAAG,MAAMR,IAAI,CAACM,GAAL,CAASG,UAAT,CAAoBd,IAApB,CAA3B;AACA,UAAIC,OAAO,GAAGI,IAAI,CAACU,KAAL,CAAWC,OAAX,CAAmBH,YAAnB,EAAiC,OAAjC,CAAd;AACA,YAAMV,SAAS,GAAG,MAAME,IAAI,CAACM,GAAL,CAASM,GAAT,CAAaC,KAAb,EAAxB;AACA,YAAMd,WAAW,GAAG,MAAMC,IAAI,CAACM,GAAL,CAASM,GAAT,CAAaE,cAAb,EAA1B;AAEA,YAAMC,OAAO,GAAG,MAAMtB,mBAAmB,CAACO,IAAD,EAAM,eAAN,CAAzC;AACA,YAAMgB,WAAW,GAAG,MAAMvB,mBAAmB,CAACO,IAAD,EAAM,mBAAN,CAA7C;AACA,YAAMiB,WAAW,GAAG,MAAMxB,mBAAmB,CAACO,IAAD,EAAM,aAAN,CAA7C;AAEA,UAAIkB,WAAW,GAAG,CAAlB;AACA,UAAIC,SAAS,GAAG,CAAhB;;AAEA,UAAGF,WAAW,CAACG,QAAf,EAAwB;AACtBF,QAAAA,WAAW,GAAG,MAAMH,OAAO,CAACM,OAAR,CAAgBH,WAAhB,GAA8BI,IAA9B,EAApB;AACAH,QAAAA,SAAS,GAAG,MAAMJ,OAAO,CAACM,OAAR,CAAgBF,SAAhB,CAA0BH,WAAW,CAACI,QAAtC,EAAgDE,IAAhD,EAAlB;AACD;;AAEDC,MAAAA,MAAM,CAACvB,IAAP,GAAcA,IAAd;AACAuB,MAAAA,MAAM,CAAC5B,IAAP,GAAcA,IAAd;AACAQ,MAAAA,QAAQ,CAAC;AACPE,QAAAA,QADO;AAEPV,QAAAA,IAAI,EAAEA,IAFC;AAGPC,QAAAA,OAAO,EAAEA,OAHF;AAIPC,QAAAA,SAAS,EAAE;AAAEkB,UAAAA,OAAF;AAAWC,UAAAA,WAAX;AAAwBC,UAAAA;AAAxB,SAJJ;AAKPnB,QAAAA,SAAS,EAAEA,SALJ;AAMPC,QAAAA,WAAW,EAAEA,WANN;AAOPC,QAAAA,IAAI,EAAEA,IAPC;AAQPkB,QAAAA,WARO;AAQMC,QAAAA;AARN,OAAD,CAAR;AAUD;;AACDf,IAAAA,QAAQ;AACT,GApCM,EAoCL,EApCK,CAAT;AAqCE,2BAAWF,KAAX;AACH,CAhDH;;AAiDE,eAAeR,OAAf","sourcesContent":["import  { useState, useEffect } from 'react';\nimport { getWeb3, getContractInstance}  from \"../Web3Util\";\n\nconst useWeb3 = ()=> {\n    const [state, setState] =  useState({\n        user: \"\",\n        balance: 0,\n        contracts: null,\n        networkId: \"\",\n        networkType: \"\",\n        web3: undefined,\n      });\n\n    useEffect(()=>{\n        async function loadWeb3 () {\n          const web3 = await getWeb3();\n          const accounts = await web3.eth.getAccounts();\n          const user = accounts[0];\n          const balanceInWei = await web3.eth.getBalance(user);\n          var balance = web3.utils.fromWei(balanceInWei, \"ether\");\n          const networkId = await web3.eth.net.getId();\n          const networkType = await web3.eth.net.getNetworkType();\n          \n          const myToken = await getContractInstance(web3,'TontinarToken');\n          const myTokenSale = await getContractInstance(web3,'TontinarTokenSale');\n          const kycContract = await getContractInstance(web3,'KycContract');\n           \n          let totalSupply = 0;\n          let balanceOf = 0;\n\n          if(kycContract._address){\n            totalSupply = await myToken.methods.totalSupply().call();\n            balanceOf = await myToken.methods.balanceOf(myTokenSale._address).call();\n          }\n\n          window.web3 = web3;\n          window.user = user;\n          setState({ \n            accounts,\n            user: user, \n            balance: balance, \n            contracts: { myToken, myTokenSale, kycContract},\n            networkId: networkId ,\n            networkType: networkType,\n            web3: web3,\n            totalSupply, balanceOf\n           });\n        }\n        loadWeb3();\n      },[ ]);\n      return {...state} ;\n  }\n  export default useWeb3;"]},"metadata":{},"sourceType":"module"}