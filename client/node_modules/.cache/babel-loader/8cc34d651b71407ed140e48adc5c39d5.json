{"ast":null,"code":"import Web3 from 'web3';\nexport const getWeb3 = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } else if (window.web3) {\n      // load metamask provider\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {\n      const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\n/**\n * @Util get contract instance by name \n * @author christopher chavez\n */\n\nexport const getContractInstance = async (web3, contractName) => {\n  const networkId = await web3.eth.net.getId();\n\n  const contract = require(\"./abi/\".concat(contractName, \".json\"));\n\n  const deployedNetwork = contract.networks[networkId];\n  return new web3.eth.Contract(contract.abi, deployedNetwork && deployedNetwork.address);\n};","map":{"version":3,"sources":["C:/Workspace/Repo/Smart Contract Solidity/TontinarCoin/client/src/Web3Util.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","console","log","provider","providers","HttpProvider","getContractInstance","contractName","networkId","eth","net","getId","contract","require","deployedNetwork","networks","Contract","abi","address"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,MAAMC,OAAO,GAAG,MACnB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACjCC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC5C,QAAID,MAAM,CAACE,QAAX,EAAqB;AACjB,YAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAb;;AACA,UAAI;AACJ,cAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN;AACAN,QAAAA,OAAO,CAACK,IAAD,CAAP;AACC,OAHD,CAGE,OAAOE,KAAP,EAAc;AAChBN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACC;AACJ,KARD,MAQO,IAAIL,MAAM,CAACG,IAAX,EAAiB;AACpB;AACA,YAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAT,MAAAA,OAAO,CAACK,IAAD,CAAP;AACH,KALM,MAKA;AACH,YAAMK,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAjB;AACA,YAAMP,IAAI,GAAG,IAAIR,IAAJ,CAASa,QAAT,CAAb;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAT,MAAAA,OAAO,CAACK,IAAD,CAAP;AACH;AACA,GApBD;AAqBH,CAtBG,CADG;AAyBP;;;;;AAIA,OAAO,MAAMQ,mBAAmB,GAAG,OAAOR,IAAP,EAAaS,YAAb,KAA8B;AAC7D,QAAMC,SAAS,GAAG,MAAMV,IAAI,CAACW,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;;AACA,QAAMC,QAAQ,GAAGC,OAAO,iBAAUN,YAAV,WAAxB;;AAEA,QAAMO,eAAe,GAAGF,QAAQ,CAACG,QAAT,CAAkBP,SAAlB,CAAxB;AACA,SAAO,IAAIV,IAAI,CAACW,GAAL,CAASO,QAAb,CACHJ,QAAQ,CAACK,GADN,EAEHH,eAAe,IAAIA,eAAe,CAACI,OAFhC,CAAP;AAIH,CATM","sourcesContent":["import Web3 from 'web3';\nexport const getWeb3 = () =>\n    new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n    if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n        await window.ethereum.enable();\n        resolve(web3);\n        } catch (error) {\n        reject(error);\n        }\n    } else if (window.web3) {\n        // load metamask provider\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n    } else {\n        const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n    }\n    });\n});\n\n/**\n * @Util get contract instance by name \n * @author christopher chavez\n */\nexport const getContractInstance = async (web3, contractName) => {\n    const networkId = await web3.eth.net.getId();\n    const contract = require(`./abi/${contractName}.json`); \n\n    const deployedNetwork = contract.networks[networkId];\n    return new web3.eth.Contract(\n        contract.abi,\n        deployedNetwork && deployedNetwork.address,\n    );\n}"]},"metadata":{},"sourceType":"module"}